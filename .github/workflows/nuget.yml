name: Build and Publish NuGet Package

on: 
  workflow_dispatch:

jobs:
  generate-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag, if no tags exist, use v0.0.0
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag found: $LATEST_TAG"

      - name: Determine version bump type
        id: bump_type
        run: |
          # Check commit messages for version bump indicators
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ $COMMIT_MSG == *"BREAKING CHANGE"* ]] || [[ $COMMIT_MSG == *"major:"* ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif [[ $COMMIT_MSG == *"feat:"* ]] || [[ $COMMIT_MSG == *"feature:"* ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi

      - name: Generate new version
        id: version_bump
        uses: anothrNick/github-tag-action@1.71.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INITIAL_VERSION: 1.0.0
          DEFAULT_BUMP: ${{ steps.bump_type.outputs.bump }}
          WITH_V: true
          DRY_RUN: false
          PRERELEASE: false

    outputs:
      new_version: ${{ steps.version_bump.outputs.new_tag }}
      previous_version: ${{ steps.get_latest_tag.outputs.latest_tag }}

  package-and-publish-lib:
    runs-on: ubuntu-latest
    needs: generate-version
    if: needs.generate-version.outputs.new_version != ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore ./AppAmbitMaui/AppAmbitMaui.csproj

      - name: Build the project
        run: dotnet build ./AppAmbitMaui/AppAmbitMaui.csproj --configuration Release --no-restore

      - name: Run tests (if any)
        run: dotnet test ./AppAmbitMaui/AppAmbitMaui.csproj --configuration Release --no-build --verbosity normal
        continue-on-error: true

      - name: Generate NuGet package
        run: |
          dotnet pack ./AppAmbitMaui/AppAmbitMaui.csproj \
          --configuration Release \
          --no-build \
          -p:PackageVersion=${{ needs.generate-version.outputs.new_version }} \
          -p:AssemblyVersion=${{ needs.generate-version.outputs.new_version }} \
          -p:FileVersion=${{ needs.generate-version.outputs.new_version }} \
          -o packages

      - name: List generated packages
        run: ls -la packages/

      - name: Upload NuGet package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package-${{ needs.generate-version.outputs.new_version }}
          path: packages/*.nupkg

      - name: Create Release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.generate-version.outputs.new_version }}
          release_name: Release ${{ needs.generate-version.outputs.new_version }}
          body: |
            ## Changes in this Release
            - Version bumped from ${{ needs.generate-version.outputs.previous_version }} to ${{ needs.generate-version.outputs.new_version }}
            
            ## Package Information
            - **Package Version**: ${{ needs.generate-version.outputs.new_version }}
            - **Build Date**: ${{ github.event.head_commit.timestamp }}
            - **Commit**: ${{ github.sha }}
          draft: false
          prerelease: false

  publish-to-nuget:
    runs-on: ubuntu-latest
    needs: [generate-version, package-and-publish-lib]
    if: github.ref == 'refs/heads/main' && needs.generate-version.outputs.new_version != ''
    environment: development

    steps:
      - name: Download NuGet package
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-${{ needs.generate-version.outputs.new_version }}
          path: packages