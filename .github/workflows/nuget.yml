name: Build and Publish NuGet Package

# The main branch is develop
on:
  workflow_dispatch:

env:
  PROJECT_PATH: ./AppAmbitMaui/AppAmbitMaui.csproj
  FOLDER_OUTPUT: artifacts
  RELEASE_TYPE: Release

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: windows-latest
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Extract latest changelog entry
        id: changelog
        run: |
          LATEST_CHANGELOG=$(awk '/^## Version /{if (p) exit; p=1} p' CHANGELOG.md | sed '1d')
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$LATEST_CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Show changelog
        run: |
          echo "Last changes:"
          echo "${{ steps.changelog.outputs.changelog }}"

      - name: Read version from csproj
        id: version
        run: |
          VERSION_NAME=$(xmllint --xpath "string(//Project/PropertyGroup/Version)" ${{ env.PROJECT_PATH }})
          
          echo "VERSION_NAME=$VERSION_NAME"
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "new_tag=v$VERSION_NAME" >> $GITHUB_OUTPUT

          # Detect if it's a pre-release version (ej: contains -rc, -beta, etc.)
          if [[ "$VERSION_NAME" =~ "-" ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Build
        run: dotnet build ${{ env.PROJECT_PATH }} --configuration ${{ env.RELEASE_TYPE }}

      - name: Create artifacts directory
        run: mkdir ${{ env.FOLDER_OUTPUT }}

      - name: Package NuGet
        run: dotnet pack --output ./${{ env.FOLDER_OUTPUT }} --configuration ${{ env.RELEASE_TYPE }} -p:PackageVersion=${{ steps.version.outputs.new_version }} ${{ env.PROJECT_PATH }}

      - name: Create Release and Upload Assets
        if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'feature/Nuget_CICD')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          name: "${{ steps.version.outputs.new_tag }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          files: ./${{ env.FOLDER_OUTPUT }}/*.nupkg
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ steps.version.outputs.is_prerelease }}

      - name: Push to NuGet to create a release
        run: dotnet nuget push ./${{ env.FOLDER_OUTPUT }}/*.nupkg --api-key ${{ secrets.NUGET_APPKEY_SECRET }} --source https://api.nuget.org/v3/index.json